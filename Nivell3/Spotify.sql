-- MySQL Script generated by MySQL Workbench
-- Fri Oct 18 11:36:47 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Spotify
-- -----------------------------------------------------
-- Spotify database schema

-- -----------------------------------------------------
-- Schema Spotify
--
-- Spotify database schema
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Spotify` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
USE `Spotify` ;

-- -----------------------------------------------------
-- Table `Spotify`.`subscription`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`subscription` (
  `subscription_id` INT NOT NULL AUTO_INCREMENT COMMENT 'subscription id',
  `start_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'subscription start date',
  `expire_date` DATETIME NOT NULL COMMENT 'Date when subscription must be renewed',
  `payment_method` ENUM('C', 'P') NOT NULL COMMENT 'payment method (2 possibles values: \'C\' --> Credit card, \'P\' --> Paypal)',
  PRIMARY KEY (`subscription_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`user` (
  `user_id` INT NOT NULL AUTO_INCREMENT COMMENT 'user id',
  `email` VARCHAR(40) NOT NULL COMMENT 'user email',
  `password` VARCHAR(30) NOT NULL COMMENT 'user password',
  `username` VARCHAR(30) NOT NULL COMMENT 'user name',
  `birthdate` DATETIME NOT NULL COMMENT 'user birthdate',
  `sex` ENUM('M', 'F') NOT NULL COMMENT 'User sex, two possible values (\'M\' --> Masculi, \'F\' --> Femeni)',
  `country` VARCHAR(30) NOT NULL COMMENT 'user country',
  `zip_code` VARCHAR(15) NOT NULL COMMENT 'user zipcode',
  `user_type` ENUM('Free', 'Premium') NOT NULL COMMENT 'type of user (2 possible values: Free and Premium)',
  `subscription_id` INT NULL,
  PRIMARY KEY (`user_id`),
  INDEX `fk_user_subscription_idx` (`subscription_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_subscription`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `Spotify`.`subscription` (`subscription_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`credit_card`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`credit_card` (
  `credit_card_id` INT NOT NULL AUTO_INCREMENT,
  `card_nr` VARCHAR(16) NOT NULL COMMENT 'credit card number',
  `card_expireson` DATETIME NOT NULL,
  `card_cvc` VARCHAR(3) NOT NULL COMMENT 'card security code',
  PRIMARY KEY (`credit_card_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`payments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`payments` (
  `payments_id` INT NOT NULL AUTO_INCREMENT,
  `payment_ref` VARCHAR(30) NOT NULL,
  `payment_date` DATETIME NOT NULL,
  `payment_amount` DECIMAL(6,2) NOT NULL,
  `subscription_id` INT NOT NULL,
  `credit_card_id` INT NULL,
  PRIMARY KEY (`payments_id`),
  INDEX `fk_payments_subscription1_idx` (`subscription_id` ASC) VISIBLE,
  INDEX `fk_payments_credit_card1_idx` (`credit_card_id` ASC) VISIBLE,
  UNIQUE INDEX `payment_ref_UNIQUE` (`payment_ref` ASC) VISIBLE,
  CONSTRAINT `fk_payments_subscription1`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `Spotify`.`subscription` (`subscription_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_payments_credit_card1`
    FOREIGN KEY (`credit_card_id`)
    REFERENCES `Spotify`.`credit_card` (`credit_card_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`playlist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`playlist` (
  `playlist_id` INT NOT NULL AUTO_INCREMENT COMMENT 'playlist id',
  `playlist_title` VARCHAR(30) NOT NULL COMMENT 'playlist title',
  `songs_qty` INT NOT NULL DEFAULT 0 COMMENT 'quantity of songs in the playlist',
  `createdon` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'playlist creation date',
  `user_id` INT NOT NULL COMMENT 'user who created the playlist',
  `enabled` TINYINT NOT NULL DEFAULT 1 COMMENT 'playlist state (0 --> disabled/erased, 1 --> enabled)',
  `playlist_disabledon` DATETIME NULL COMMENT 'date the playlist was erased / disabled',
  PRIMARY KEY (`playlist_id`),
  INDEX `fk_playlist_user1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_playlist_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `Spotify`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`artist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`artist` (
  `artist_id` INT NOT NULL AUTO_INCREMENT COMMENT 'artist id',
  `name` VARCHAR(30) NOT NULL COMMENT 'artist name',
  `artist_picture` VARCHAR(50) NOT NULL COMMENT 'path of the artist picture file',
  PRIMARY KEY (`artist_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`album`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`album` (
  `album_id` INT NOT NULL AUTO_INCREMENT COMMENT 'album id',
  `title` VARCHAR(30) NOT NULL COMMENT 'title of the album',
  `year_publishedon` INT NOT NULL COMMENT 'year the album was published',
  `cover_image` VARCHAR(50) NOT NULL COMMENT 'path of the cover image file',
  `publishedby_artist_id` INT NOT NULL,
  PRIMARY KEY (`album_id`),
  INDEX `fk_album_artist1_idx` (`publishedby_artist_id` ASC) VISIBLE,
  CONSTRAINT `fk_album_artist1`
    FOREIGN KEY (`publishedby_artist_id`)
    REFERENCES `Spotify`.`artist` (`artist_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`song`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`song` (
  `song_id` INT NOT NULL AUTO_INCREMENT COMMENT 'song id',
  `title` VARCHAR(30) NOT NULL COMMENT 'title of the song',
  `duration` TIME NOT NULL COMMENT 'duration of the song',
  `reproductions_qty` INT NOT NULL COMMENT 'number of reproductions of the song in Spotify',
  `album_id` INT NOT NULL,
  PRIMARY KEY (`song_id`),
  INDEX `fk_song_album1_idx` (`album_id` ASC) VISIBLE,
  CONSTRAINT `fk_song_album1`
    FOREIGN KEY (`album_id`)
    REFERENCES `Spotify`.`album` (`album_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`playlist_contents`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`playlist_contents` (
  `playlist_contents_id` INT NOT NULL AUTO_INCREMENT,
  `playlist_id` INT NOT NULL,
  `addedby_user_id` INT NOT NULL,
  `song_addedon` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `song_id` INT NOT NULL,
  PRIMARY KEY (`playlist_contents_id`),
  INDEX `fk_playlist_contents_playlist1_idx` (`playlist_id` ASC) VISIBLE,
  INDEX `fk_playlist_contents_user1_idx` (`addedby_user_id` ASC) VISIBLE,
  INDEX `fk_playlist_contents_song1_idx` (`song_id` ASC) VISIBLE,
  CONSTRAINT `fk_playlist_contents_playlist1`
    FOREIGN KEY (`playlist_id`)
    REFERENCES `Spotify`.`playlist` (`playlist_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_playlist_contents_user1`
    FOREIGN KEY (`addedby_user_id`)
    REFERENCES `Spotify`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_playlist_contents_song1`
    FOREIGN KEY (`song_id`)
    REFERENCES `Spotify`.`song` (`song_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`user_follows_artist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`user_follows_artist` (
  `user_follows_artist_id` INT NOT NULL AUTO_INCREMENT COMMENT 'id',
  `user_id` INT NOT NULL COMMENT 'id of the follower user',
  `artist_id` INT NOT NULL COMMENT 'followed artist',
  PRIMARY KEY (`user_follows_artist_id`),
  INDEX `fk_user_follows_artist_user1_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_user_follows_artist_artist1_idx` (`artist_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_follows_artist_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `Spotify`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_follows_artist_artist1`
    FOREIGN KEY (`artist_id`)
    REFERENCES `Spotify`.`artist` (`artist_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`artist_related_with`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`artist_related_with` (
  `artist_related_with_id` INT NOT NULL AUTO_INCREMENT,
  `artist_id` INT NULL COMMENT 'artist 1',
  `related_artist_id` INT NULL COMMENT 'artist 2 who is related with artist 1',
  PRIMARY KEY (`artist_related_with_id`),
  INDEX `fk_artist_related_with_artist1_idx` (`artist_id` ASC) VISIBLE,
  INDEX `fk_artist_related_with_artist2_idx` (`related_artist_id` ASC) VISIBLE,
  CONSTRAINT `fk_artist_related_with_artist1`
    FOREIGN KEY (`artist_id`)
    REFERENCES `Spotify`.`artist` (`artist_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_artist_related_with_artist2`
    FOREIGN KEY (`related_artist_id`)
    REFERENCES `Spotify`.`artist` (`artist_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`user_has_favourites_albums`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`user_has_favourites_albums` (
  `user_has_favourites_id` INT NOT NULL AUTO_INCREMENT,
  `user_user_id` INT NULL,
  `album_id` INT NULL,
  PRIMARY KEY (`user_has_favourites_id`),
  INDEX `fk_user_has_favourites_user_idx` (`user_user_id` ASC) VISIBLE,
  INDEX `fk_user_has_favourites_album_idx` (`album_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_favourites_user`
    FOREIGN KEY (`user_user_id`)
    REFERENCES `Spotify`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_favourites_album1`
    FOREIGN KEY (`album_id`)
    REFERENCES `Spotify`.`album` (`album_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Spotify`.`user_has_favourites_songs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Spotify`.`user_has_favourites_songs` (
  `user_has_favourites_id` INT NOT NULL AUTO_INCREMENT,
  `user_user_id` INT NULL,
  `song_id` INT NOT NULL,
  PRIMARY KEY (`user_has_favourites_id`),
  INDEX `fk_user_has_favourites_user1_idx` (`user_user_id` ASC) VISIBLE,
  INDEX `fk_user_has_favourites_songs_song_idx` (`song_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_favourites_user10`
    FOREIGN KEY (`user_user_id`)
    REFERENCES `Spotify`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_favourites_songs_song1`
    FOREIGN KEY (`song_id`)
    REFERENCES `Spotify`.`song` (`song_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
